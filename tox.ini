[tox]
requires =
    tox>=4.2
env_list =
    fix
    type
    readme
    3.13
    3.12
    3.11
    3.10
    3.9
skip_missing_interpreters = true

[testenv]
description = run the tests with pytest under {envname}
package = wheel
wheel_build_env = .pkg
extras =
    testing
pass_env =
    PYTEST_*
set_env =
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}{/}.coverage.{envname}}
    COVERAGE_PROCESS_START = {toxinidir}{/}pyproject.toml
commands =
    pytest {tty:--color=yes} {posargs: --junitxml {toxworkdir}{/}junit.{envname}.xml \
      --cov {envsitepackagesdir}{/}pypi_changes --cov {toxinidir}{/}tests \
      --cov-config=pyproject.toml --no-cov-on-fail --cov-report term-missing:skip-covered --cov-context=test \
      --cov-report html:{envtmpdir}{/}htmlcov \
      --cov-report xml:{toxworkdir}{/}coverage.{envname}.xml \
      tests}

[testenv:fix]
description = format the code base to adhere to our styles, and complain about what we cannot do automatically
skip_install = true
deps =
    pre-commit>=3.8
pass_env =
    {[testenv]passenv}
    PROGRAMDATA
commands =
    pre-commit run --all-files --show-diff-on-failure {tty:--color=always} {posargs}

[testenv:type]
description = run type check on code base
deps =
    mypy==1.11.2
    types-requests>=2.32.0.20240907
commands =
    mypy src/pypi_changes
    mypy tests

[testenv:readme]
description = check that the long description is valid
skip_install = true
deps =
    build[uv]>=1.2.2
    check-wheel-contents>=0.6
    twine>=5.1.1
commands =
    pyproject-build --installer uv --outdir {envtmpdir} --sdist --wheel .
    twine check {envtmpdir}{/}*
    check-wheel-contents --no-config {envtmpdir}

[testenv:dev]
package = editable
deps =
    {[testenv:type]deps}
commands =
    uv pip tree
    python -c "print(r'{envpython}')"
